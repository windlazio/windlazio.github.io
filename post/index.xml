<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Pavel Han的博客</title>
    <link>http://www.pavelhan.tech/post/</link>
    <description>Recent content in Posts on Pavel Han的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 11 May 2021 10:40:10 +0800</lastBuildDate>
    
	<atom:link href="http://www.pavelhan.tech/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>蓝牙设备的BQB认证</title>
      <link>http://www.pavelhan.tech/post/2021-05-11-00-%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87%E7%9A%84BQB%E8%AE%A4%E8%AF%81/</link>
      <pubDate>Tue, 11 May 2021 10:40:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2021-05-11-00-%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87%E7%9A%84BQB%E8%AE%A4%E8%AF%81/</guid>
      <description>什么是BQB认证？ BQB：Bluetooth Qualification Body。 只有通过蓝牙SIG组织认证的产品才是真正的蓝牙产品，才能保证产品的兼容性和相关性能是符合蓝牙标准的，才能合法使用蓝牙或BLUETOOTH的LOGO以及相关蓝牙技术规范，不然被查到需要罚款。 什么情况下需要做BQB认证？ 凡带有蓝</description>
    </item>
    
    <item>
      <title>WiFi低功耗工作模式的完整工作流程总结</title>
      <link>http://www.pavelhan.tech/post/2021-02-01-00-WiFi%E4%BD%8E%E5%8A%9F%E8%80%97%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%8C%E6%95%B4%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 01 Feb 2021 17:40:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2021-02-01-00-WiFi%E4%BD%8E%E5%8A%9F%E8%80%97%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%8C%E6%95%B4%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B%E6%80%BB%E7%BB%93/</guid>
      <description>STA的两种不同的功耗工作模式 总的来说，STA包含有两种不同的功耗工作模式： Active Mode：在这种状态下，WiFi的无线信号接收电路RX始终处于打开状态，因此可以在任何时间接收AP发过来的数据帧。 因为STA的RX要保持打开状态，这种模式下自然功耗较大； PS（Power Saving） M</description>
    </item>
    
    <item>
      <title>Wireshark抓包环境的工作原理与使用技巧总结</title>
      <link>http://www.pavelhan.tech/post/2021-01-21-00-Wireshark%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 21 Jan 2021 10:40:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2021-01-21-00-Wireshark%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</guid>
      <description>Wireshark基本介绍 Wireshark是全球使用最广泛的开源抓包软件（其前身为Ethereal），是一个通用的网络数据嗅探器和协议分析工具。1998年开始以GPL开源许可证发布。 主要功能： 分析网络底层协议； 解决网络故障问题； 找寻网络安全问题； 跨平台支持很好，可以在Windo</description>
    </item>
    
    <item>
      <title>基于Wireshark&#43;Acrylic WiFi Sniffer的WiFi空口抓包环境</title>
      <link>http://www.pavelhan.tech/post/2021-01-18-00-%E5%9F%BA%E4%BA%8EWireshark&#43;Acrylic-WiFi-Sniffer%E7%9A%84WiFi%E7%A9%BA%E5%8F%A3%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Mon, 18 Jan 2021 16:40:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2021-01-18-00-%E5%9F%BA%E4%BA%8EWireshark&#43;Acrylic-WiFi-Sniffer%E7%9A%84WiFi%E7%A9%BA%E5%8F%A3%E6%8A%93%E5%8C%85%E7%8E%AF%E5%A2%83/</guid>
      <description>前提条件： 安装好wireshark和Acrylic WiFi Sniffer软件； 一个能够支持Monitor工作模式的无线网卡； 提前知道要抓包的AP信道； （如果需要对数据链路层以上的数据进行解密的话，需要）提前知道要抓包的AP SSID和密码； 安装Wireshark和Acrylic WiFi Sniffer 在ww</description>
    </item>
    
    <item>
      <title>WiFi中的Beacon、TIM与DTIM概念总结</title>
      <link>http://www.pavelhan.tech/post/2021-01-12-00-WiFi%E4%B8%AD%E7%9A%84BeaconTIM%E4%B8%8EDTIM%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 12 Jan 2021 11:40:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2021-01-12-00-WiFi%E4%B8%AD%E7%9A%84BeaconTIM%E4%B8%8EDTIM%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/</guid>
      <description>Beacon Frame AP默认每102.4ms向外广播一个Beacon Frame，每个Beacon Frame中都包含有一个TIM Field，其中描述了AP为哪些STA缓存了数据； Beacon Frame的发送周期以及DTIM间隔可以在路由器的设置选项中进行设置（路由器支持设置的情况下）； 注意：Beacon Fr</description>
    </item>
    
    <item>
      <title>GPS基础及其定位的工作原理</title>
      <link>http://www.pavelhan.tech/post/2021-01-11-00-GPS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%85%B6%E5%AE%9A%E4%BD%8D%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 11 Jan 2021 10:40:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2021-01-11-00-GPS%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%85%B6%E5%AE%9A%E4%BD%8D%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>GPS基础 GPS：Global Position System，全球定位系统。全称为NAVSTAR GPS（NAVigation Satellite Timing And Ranging Global Position System，导航星测时与测距全球定位系统）。 GPS是一个由美国国防部开发的空基全天侯导航系统，它用以满足军方在地面或近地空间内获取在一个通用参照系中的位置、速</description>
    </item>
    
    <item>
      <title>GB28181基础知识学习总结</title>
      <link>http://www.pavelhan.tech/post/2020-10-13-00-GB28181%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 13 Oct 2020 10:40:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-10-13-00-GB28181%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</guid>
      <description>GB28281标准要解决的问题： 用于解决音视频监控领域中，不同厂家生产的不同平台和不同产品之间的互通协议问题。 在GB28181协议推出之前，不同厂家的不同产品往往都有自己的解决方案和通信协议，因为基本上监控平台与摄像头、DVR等设备之间只能在厂家内部达成对接协议互通。 GB2818</description>
    </item>
    
    <item>
      <title>最简单的基于QT&#43;ffmpeg的播放器的例子</title>
      <link>http://www.pavelhan.tech/post/2020-09-29-00-%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%9F%BA%E4%BA%8EQT&#43;ffmpeg%E7%9A%84%E6%92%AD%E6%94%BE%E5%99%A8%E7%9A%84%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Tue, 29 Sep 2020 09:40:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-09-29-00-%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%9F%BA%E4%BA%8EQT&#43;ffmpeg%E7%9A%84%E6%92%AD%E6%94%BE%E5%99%A8%E7%9A%84%E4%BE%8B%E5%AD%90/</guid>
      <description>前提条件： 基于 搭建基于QT Creator的ffmpeg开发环境在Windows环境中完成QT Creator++ffmpeg的开发环境，能够在QT Creator中正常的调用ffmpeg library中的接口得到正确的结果。 UI准备： 在QT Creator中新建一个QT Wigets Applica</description>
    </item>
    
    <item>
      <title>搭建基于QT Creator的ffmpeg开发环境</title>
      <link>http://www.pavelhan.tech/post/2020-09-24-00-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EQTCreator%E7%9A%84ffmpeg%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Thu, 24 Sep 2020 12:40:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-09-24-00-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8EQTCreator%E7%9A%84ffmpeg%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>操作系统版本：Windows 10. 从ffmpeg上下载windows平台上预编译好的ffmpeg库 下载地址： https://ffmpeg.zeranoe.com/builds/。 在基于动态链接库开发的情况下，需要下载下图中的Shared和Dev两个包： 下载后解压缩到某个指定的目录中备</description>
    </item>
    
    <item>
      <title>AHD模拟摄像头的反向控制协议-Coaxial Protocol</title>
      <link>http://www.pavelhan.tech/post/2020-09-22-00-AHD%E6%A8%A1%E6%8B%9F%E6%91%84%E5%83%8F%E5%A4%B4%E7%9A%84%E5%8F%8D%E5%90%91%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE-CoaxialProtocol/</link>
      <pubDate>Tue, 22 Sep 2020 14:02:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-09-22-00-AHD%E6%A8%A1%E6%8B%9F%E6%91%84%E5%83%8F%E5%A4%B4%E7%9A%84%E5%8F%8D%E5%90%91%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE-CoaxialProtocol/</guid>
      <description>缘起 对于控制一个云台摄像头的镜头动作而言，使用IP协议来进行控制是很容易做到的：IP摄像头与控制主机之间可以通过IP协议建立全双工双向通信，云台控制的命令可以很方便的发送到摄像头端，在摄像头端进行镜头的旋转、缩放等控制； 但是对于模拟摄像头而言，要轻松的做到这一点就很麻烦了：因为模</description>
    </item>
    
    <item>
      <title>QT5.9.8版本在海思3521平台上的移植</title>
      <link>http://www.pavelhan.tech/post/2020-09-15-00-QT5.9.8%E7%89%88%E6%9C%AC%E5%9C%A8%E6%B5%B7%E6%80%9D3521%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E7%A7%BB%E6%A4%8D/</link>
      <pubDate>Tue, 15 Sep 2020 11:02:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-09-15-00-QT5.9.8%E7%89%88%E6%9C%AC%E5%9C%A8%E6%B5%B7%E6%80%9D3521%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E7%A7%BB%E6%A4%8D/</guid>
      <description>QT源码的下载及交叉编译工具的准备 QT源码的下载地址：https://download.qt.io/archive/qt/5.9/5.9.8/single/qt-everywhere-opensource-src-5.9.8.tar.xz； 交叉编译工具： 交叉编译工具使用的是海思3</description>
    </item>
    
    <item>
      <title>AF自动对焦算法及PDAF工作原理总结</title>
      <link>http://www.pavelhan.tech/post/2020-08-07-00-AF%E8%87%AA%E5%8A%A8%E5%AF%B9%E7%84%A6%E7%AE%97%E6%B3%95%E5%8F%8APDAF%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 07 Aug 2020 14:23:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-08-07-00-AF%E8%87%AA%E5%8A%A8%E5%AF%B9%E7%84%A6%E7%AE%97%E6%B3%95%E5%8F%8APDAF%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</guid>
      <description>AF自动对焦算法的定义及基本分类 AF：Auto Focus，自动对焦。 自动对焦的基本定义：相机上的图像传感器接收到物体反射的光，根据相机内部的计算与处理，然后由电动对焦装置对镜头进行的对焦操作。 基于自动对焦流程中是否需要相机主动向被拍摄的景物发射，自动对焦算法从大体上可以分为主动式</description>
    </item>
    
    <item>
      <title>变焦镜头的分类及变焦原理总结</title>
      <link>http://www.pavelhan.tech/post/2020-07-31-00-%E5%8F%98%E7%84%A6%E9%95%9C%E5%A4%B4%E7%9A%84%E5%88%86%E7%B1%BB%E5%8F%8A%E5%8F%98%E7%84%A6%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 31 Jul 2020 16:23:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-07-31-00-%E5%8F%98%E7%84%A6%E9%95%9C%E5%A4%B4%E7%9A%84%E5%88%86%E7%B1%BB%E5%8F%8A%E5%8F%98%E7%84%A6%E5%8E%9F%E7%90%86%E6%80%BB%E7%BB%93/</guid>
      <description>变焦的分类及其实现变焦的原理 我们通常所谓的变焦能力通常可以分为光学变焦和数码变焦两种类型。两者虽然都有助于望远拍摄时放大远方物体，但是只有光学变焦可以支持图像主体成像后，让主体不但变大，同时也相对更清晰；数码变焦只能将原先的图像尺寸裁小，让图像在LCD屏幕上变得比较大，但并不会有</description>
    </item>
    
    <item>
      <title>USB复合设备及UVC Profile的描述符详解</title>
      <link>http://www.pavelhan.tech/post/2020-07-23-00-USB%E5%A4%8D%E5%90%88%E8%AE%BE%E5%A4%87%E5%8F%8AUVC-Profile%E7%9A%84%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Fri, 24 Jul 2020 17:03:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-07-23-00-USB%E5%A4%8D%E5%90%88%E8%AE%BE%E5%A4%87%E5%8F%8AUVC-Profile%E7%9A%84%E6%8F%8F%E8%BF%B0%E7%AC%A6%E8%AF%A6%E8%A7%A3/</guid>
      <description>USB Composite Device 所谓的USB composite device就是一个USB设备中包含有多项功能，每项功能的具体实现都包含一个或者多个相互独立的Interface，但是整个设备只有一个PID和VID。多个设备功能通过内部逻辑和接口组合的形式形成一个对外的设备。 USB Composite device可以分为两种情况： 该设备中的每个单</description>
    </item>
    
    <item>
      <title>Linux的磁盘加密技术LUKS</title>
      <link>http://www.pavelhan.tech/post/2020-07-07-00-Linux%E7%9A%84%E7%A3%81%E7%9B%98%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AFLUKS/</link>
      <pubDate>Tue, 07 Jul 2020 14:03:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-07-07-00-Linux%E7%9A%84%E7%A3%81%E7%9B%98%E5%8A%A0%E5%AF%86%E6%8A%80%E6%9C%AFLUKS/</guid>
      <description>Linux系统的磁盘加密技术LUKS简介 LUKS：Linux Unified Key Setup。 LUKS是Linux系统为硬盘分区进行加密操作提供的一个标准，能够通用于各种Linux系统发布版本中。 使用LUKS技术对磁盘分区进行加密后，必须要先输入密码对其进行解密后才能把这个加密分区挂载到文件系统中</description>
    </item>
    
    <item>
      <title>TI的电量跟踪技术Impedance Track学习总结</title>
      <link>http://www.pavelhan.tech/post/2020-06-22-00-TI%E7%9A%84%E7%94%B5%E9%87%8F%E8%B7%9F%E8%B8%AA%E6%8A%80%E6%9C%AFImpedance-Track%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 22 Jun 2020 09:23:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-06-22-00-TI%E7%9A%84%E7%94%B5%E9%87%8F%E8%B7%9F%E8%B8%AA%E6%8A%80%E6%9C%AFImpedance-Track%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</guid>
      <description>电池及电量计的主要参数列表： QMax：电池的总的化学容量； OCV：Open Circuit Voltage，电池输出的开路电压； 通常认为电池耗电处于Relaxation状态（此时的电流很小）下的电池电压也是OCV电压； DOD：Depth of Discharge，放电深度； 电量计内部包含有放电深度DO</description>
    </item>
    
    <item>
      <title>在Debian/Linux环境下配置C/C&#43;&#43;的Jenkins持续集成环境</title>
      <link>http://www.pavelhan.tech/post/2020-06-19-00-%E5%9C%A8Debian%E4%B8%8B%E9%85%8D%E7%BD%AEC&#43;&#43;%E7%9A%84Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Fri, 19 Jun 2020 16:42:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-06-19-00-%E5%9C%A8Debian%E4%B8%8B%E9%85%8D%E7%BD%AEC&#43;&#43;%E7%9A%84Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/</guid>
      <description>安装Java JDK环境 从Oracle官网上下载最新版本的JDK包； https://www.oracle.com/java/technologies/javase-downloads.html 当前最新版本是14.0.1。 因为是在Debian系统上使用，因此选择下载jdk安装文件的deb版本：jdk-14.0.1_linux-x64_bin.deb。 安装以上下载到的jdk deb包并查看安装位置： 1 2 3 4</description>
    </item>
    
    <item>
      <title>锂电池的基础知识</title>
      <link>http://www.pavelhan.tech/post/2020-06-10-00-%E9%94%82%E7%94%B5%E6%B1%A0%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Wed, 10 Jun 2020 16:42:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-06-10-00-%E9%94%82%E7%94%B5%E6%B1%A0%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>锂电池的组成结构 锂电池在结构上主要分为四个部分：正极，负极，电解液，隔膜。 正极：磷酸铁LFP，三元材料（镍钴锰NCM/镍钴铝NCA）； LFP能量密度和低温性能比三元材料差很多，但是安全性方面要好很多； 负极：基本上都是使用石墨； 隔膜：放置于两极之间，作为隔离正负极的装置，以避免两极</description>
    </item>
    
    <item>
      <title>Linux IPC机制之消息队列</title>
      <link>http://www.pavelhan.tech/post/2020-06-03-00-Linux-IPC%E6%9C%BA%E5%88%B6%E4%B9%8B%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Wed, 03 Jun 2020 13:42:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-06-03-00-Linux-IPC%E6%9C%BA%E5%88%B6%E4%B9%8B%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid>
      <description>消息队列基础 Linux系统中的消息队列机制是SystemV IPC提供的三大进程间IPC机制之一：消息队列，信号量，共享内存； Linux内核中会为每个IPC结构（包括消息队列、信号量和共享内存等）都使用一个非负整数的标识符来加以引用，而无论何时创建或者使用一个已经存在于内核中的IP</description>
    </item>
    
    <item>
      <title>在Debian/Linux下使用CppCheck对C代码进行静态扫描</title>
      <link>http://www.pavelhan.tech/post/2020-06-01-00-%E5%9C%A8Debian%E4%B8%8B%E4%BD%BF%E7%94%A8CppCheck%E5%AF%B9C%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8C%E9%9D%99%E6%80%81%E6%89%AB%E6%8F%8F/</link>
      <pubDate>Mon, 01 Jun 2020 18:42:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-06-01-00-%E5%9C%A8Debian%E4%B8%8B%E4%BD%BF%E7%94%A8CppCheck%E5%AF%B9C%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8C%E9%9D%99%E6%80%81%E6%89%AB%E6%8F%8F/</guid>
      <description>cppcheck的官网： http://cppcheck.net/。 cppcheck是一个C/C++静态检查工具，可以帮助我们检测出代码可能存在(潜在)的问题； cppcheck的执行完全基于C/C++源码的文本文件进行词法、语法分析，帮助开发人员找出代码中常见的隐患所在，从而规范化</description>
    </item>
    
    <item>
      <title>海思35XX系列HiMPP框架开发参考之VI模块</title>
      <link>http://www.pavelhan.tech/post/2020-05-26-00-%E6%B5%B7%E6%80%9D35XX%E7%B3%BB%E5%88%97HiMPP%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E5%8F%82%E8%80%83%E4%B9%8BVI%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Tue, 26 May 2020 10:42:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-05-26-00-%E6%B5%B7%E6%80%9D35XX%E7%B3%BB%E5%88%97HiMPP%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%E5%8F%82%E8%80%83%E4%B9%8BVI%E6%A8%A1%E5%9D%97/</guid>
      <description>主要参考文件：《HiMPP V3.0媒体处理软件开发参考》。 文档版本：21. 文档发布日期：2019-09-30. 本文档基于对海思官方SDK提供的HiMPP开发参考文件的学习，整理了该平台下视频输入接口VI模块在开发过程中流程以及主要概念。 VI模块的主要功能 VI模块能够支持从BT65</description>
    </item>
    
    <item>
      <title>GPS的NMEA数据格式解析及GPS/北斗双模模块TD3020C介绍</title>
      <link>http://www.pavelhan.tech/post/2020-05-22-00-GPS%E7%9A%84NMEA%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90%E5%8F%8AGPS&#43;%E5%8C%97%E6%96%97%E5%8F%8C%E6%A8%A1%E6%A8%A1%E5%9D%97TD3020C%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Fri, 22 May 2020 15:35:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-05-22-00-GPS%E7%9A%84NMEA%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90%E5%8F%8AGPS&#43;%E5%8C%97%E6%96%97%E5%8F%8C%E6%A8%A1%E6%A8%A1%E5%9D%97TD3020C%E4%BB%8B%E7%BB%8D/</guid>
      <description>NMEA数据格式 NEMA-0183是GPS接收机应该遵守的标准协议，也是当前世界上GPS接收机上使用最广泛的协议，绝大多数的GPS接收机，包括北斗模块在内都遵守或者至少兼容这个协议。 NMEA语句的标准格式定义如下： $&amp;lt;语句类型标识&amp;gt;，&amp;lt;数据字段&amp;gt;，&amp;lt;</description>
    </item>
    
    <item>
      <title>BT601/BT656/BT1120的基本概念解析</title>
      <link>http://www.pavelhan.tech/post/2020-05-18-00-BT601&#43;BT656&#43;BT1120%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 18 May 2020 10:08:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-05-18-00-BT601&#43;BT656&#43;BT1120%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E8%A7%A3%E6%9E%90/</guid>
      <description>要解释清楚BT656、BT601、BT1120这些规范的由来，就需要从最早期的模拟视频技术讲起。因此早期的电视以及音视频信号都是以模拟的形式采集、处理、传输、播放的，而到了数字时代，为了能够以更先进的数字形式来对模拟的图像视频进行进行处理，就要涉及到模拟视频数字化的处理，而BT6</description>
    </item>
    
    <item>
      <title>模拟高清视频传输技术：AHD，HD-TVI，HD-CVI</title>
      <link>http://www.pavelhan.tech/post/2020-05-14-00-%E6%A8%A1%E6%8B%9F%E9%AB%98%E6%B8%85%E8%A7%86%E9%A2%91%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Thu, 14 May 2020 10:56:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-05-14-00-%E6%A8%A1%E6%8B%9F%E9%AB%98%E6%B8%85%E8%A7%86%E9%A2%91%E4%BC%A0%E8%BE%93%E6%8A%80%E6%9C%AF/</guid>
      <description>缘起 由于从事摄像头相关行业以来，一直做的都是数字也就是IP摄像头领域，因此之前对于模拟摄像头的认知，还停留在10多年前CCD标清模组+CBVS接口+同轴线缆传输，以及模拟摄像头无法支持高清分辨率的认知上。 对于模拟图像传输支持高清分辨率的方案，印象里只有大华之前推出的HD-SDI的</description>
    </item>
    
    <item>
      <title>H.264的几个基本概念: IDR, dts/pts</title>
      <link>http://www.pavelhan.tech/post/2020-05-12-00-H.264%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Tue, 12 May 2020 08:56:10 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-05-12-00-H.264%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>IDR帧与I帧之间的区别 IDR：Instantaneous Decoding Refresh。 I帧与IDR帧之间的区别涉及到H.264中不同帧类型的视频解码过程。 对于普通的I帧（及其IDR帧）而言，对其进行的视频解码不依赖于其他帧，对每一个I帧（及其IDR帧）解码都可以得到一张完整的图像。 对于每一</description>
    </item>
    
    <item>
      <title>WiFi的低功耗策略实现机制总结</title>
      <link>http://www.pavelhan.tech/post/2020-05-10-00-WiFi%E7%9A%84%E4%BD%8E%E5%8A%9F%E8%80%97%E7%AD%96%E7%95%A5%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 10 May 2020 21:00:00 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-05-10-00-WiFi%E7%9A%84%E4%BD%8E%E5%8A%9F%E8%80%97%E7%AD%96%E7%95%A5%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93/</guid>
      <description>WiFi的低功耗工作模式 低功耗工作模式禁止：STA在大部分时间保持RF接收器打开等待和监听是否有自己的无线数据包，在需要发送数据的时候切换为RF发射状态。 在这种情况下，AP会直接把所有发给这个STA的frame直接发给这个STA，不会为其缓存frame。 这种情况下STA的RF电路</description>
    </item>
    
    <item>
      <title>AES的加密模式总结</title>
      <link>http://www.pavelhan.tech/post/2020-05-07-00-AES%E7%9A%84%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 07 May 2020 21:00:00 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-05-07-00-AES%E7%9A%84%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</guid>
      <description>分组密码 vs 流密码 总的来讲，我们所使用的密码算法可以分为分组密码算法和流密码算法两种。 分组密码：加密算法执行一次只能对一段固定长度的明文进行加密，得到一段固定长度的密文。 这一段固定长度的明文就是一个分组（Block），而这个明文的长度就是分组长度。 分组密码算法的分组长度、密钥长度、</description>
    </item>
    
    <item>
      <title>Hugo&#43;Github静态博客建站命令速查</title>
      <link>http://www.pavelhan.tech/post/2020-05-06-00-Hugo&#43;Github%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</link>
      <pubDate>Thu, 07 May 2020 13:34:17 +0800</pubDate>
      
      <guid>http://www.pavelhan.tech/post/2020-05-06-00-Hugo&#43;Github%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%99%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</guid>
      <description>Hugo Command： Hugo version：查看Hugo版本，确认Hugo的运行环境是否正常； Hugo new site [site name]：建立一个新的Hugo个人站点，站点内容包含在site name指定的目录中； Hugo new content/article.md：在content目录中生成Markdown文章模板； Hugo se</description>
    </item>
    
  </channel>
</rss>